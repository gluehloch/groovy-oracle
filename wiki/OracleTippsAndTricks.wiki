#summary One-sentence summary of this page.

= User anlegen =
<pre>
CREATE USER <name> IDENTIFIED BY <password>;
GRANT CONNECT TO <name>;
GRANT RESOURCE TO <name>;
</pre>
Das Password für einen User ändern:
<pre>
alter user user_name identified by new_password;
</pre>
Die Gültigkeit eines Password läßt sich ebenfalls einstellen:
<pre>
ALTER PROFILE DEFAULT LIMIT
  FAILED_LOGIN_ATTEMPTS UNLIMITED
  PASSWORD_LIFE_TIME UNLIMITED;
</pre>
In diesem Fall wird die Laufzeit auf unendlich gestellt.

= Utility Skripte =

== Blockierende Sessions ==
<pre>
select s1.username || '@' || s1.machine
  || ' ( SID=' || s1.sid || ', OSUSER=' || s1.OSUSER || ' )  is blocking '
  || s2.username || '@' || s2.machine || ' ( SID=' || s2.sid || ', SERIAL='
  || s2.serial# || ', OSUSER=' || s2.OSUSER || ' ) ' AS blocking_status
from v$lock l1, v$session s1, v$lock l2, v$session s2
where s1.sid=l1.sid and s2.sid=l2.sid
  and l1.BLOCK=1 and l2.request > 0
  and l1.id1 = l2.id1
  and l2.id2 = l2.id2;
</pre>

In diesem Zusammenhang ein Skript für das Killen bestimmter Sessions. Die <code>IN</code> Klausel ist natürlich entsprechend anzupassen.
<pre>
set serveroutput on;

DECLARE
  v_sql VARCHAR2(1000);
  
  CURSOR v_cursor IS
    SELECT SID as sid, SERIAL# as serial, STATUS, SERVER, OSUSER
    FROM V$SESSION
    WHERE OSUSER NOT IN ('USER_1', 'USER_2');
BEGIN
  FOR row IN v_cursor
  LOOP
        DBMS_OUTPUT.PUT_LINE('SID: ' || row.sid || ', serial: ' || row.serial || ', os_user: ' || row.osuser);
        v_sql := 'ALTER SYSTEM KILL SESSION '''
          || row.sid || ',' || row.serial || '''';
        DBMS_OUTPUT.PUT_LINE(v_sql);
        execute immediate v_sql;
  END LOOP;
END;
</pre>

== Arbeiten mit DATE und TIMESTAMP ==
Der folgende Befehl liefert die aktuelle Systemzeit. In dem Format-String sieht man die von Oracle verwendeten Abkürzungen. MM steht für Monate und MI für Minuten. Das kann schon mal durcheinander gehen.
<pre>
SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') FROM DUAL;
</pre>

Die Funktion <code>last_day</code> liefert den letzten Tag eines Monats.
<pre>
SELECT TO_CHAR(LAST_DAY(TO_DATE('200901', 'YYYYMM')), 'YYYY-MM-DD HH24:MI:SS') as last_day FROM DUAL;
</pre>

Die Funktion <code>trunc</code> schneidet bei Aufruf ohne Formatangabe die Uhrzeit aus einem DATE ab.
<pre>
SELECT TRUNC(TO_DATE('24.03.1971', 'dd.mm.yyyy')) FROM DUAL;
</pre>

Die Funktion kann aber noch mehr:
<pre>
TRUNC(TO_DATE('22-AUG-03'), 'YEAR')  	liefert '01-JAN-03'
TRUNC(TO_DATE('22-AUG-03'), 'Q') 	liefert '01-JUL-03'
TRUNC(TO_DATE('22-AUG-03'), 'MONTH') 	liefert '01-AUG-03'
TRUNC(TO_DATE('22-AUG-03'), 'DDD') 	liefert '22-AUG-03'
TRUNC(TO_DATE('22-AUG-03'), 'DAY') 	liefert '17-AUG-03'
</pre>
Interessant finde ich den Parameter <code>'Q'</code>.

Für das Hinzufügen von Monaten gibt es eine spezielle Funktion:
<pre>
SELECT ADD_MONTHS(TO_DATE('31-MAR-97'),1) from DUAL;
</pre>

== Anwenderobjekte ==
<pre>
select object_name from user_objects where object_type = 'SEQUENCE' order by object_name;
</pre>

== Entfernen von Duplikaten ==
Folgendes Skript entfernt alle Duplikate aus einer Tabelle. Die <code>where</code> Bedingung in der SubQuery definiert die Schlüsseleigenschaften der Tabelle.
<pre>
delete from my_table t1
  where exists (select 'x' from my_table t2
                   where t2.key_value1 = t1.key_value1
                     and t2.key_value2 = t1.key_value2
                     and t2.rowid      > t1.rowid);
</pre>
Oder eine Abfrage zur Anzeige aller Duplikate:
<pre>
select t1.key_value1, t1.key_value2
  from my_table t1
  group by t1.key_value1, t1.key_value2
  having count(*) > 1;
</pre>

== Entfernen aller User-Tabellen ==
Das folgende Skript entfernt alle vom Anwender angelegten Datenbanktabellen.
<pre>
DECLARE
BEGIN
  FOR i IN (SELECT table_name FROM user_tables)
  LOOP
    EXECUTE IMMEDIATE 'DROP TABLE ' || i.table_name || ' CASCADE CONSTRAINTS';
  END LOOP;
END;
</pre>

== SQL Loader ==
Das folgende Skript erstellt die SQL*Loader Konfiguration für das Beladen einer Datenbanktabelle.
<pre>
set echo off ver off feed off pages 0 
accept tname prompt 'Enter Name of Table: ' 
accept dformat prompt 'Enter Format to Use for Date Columns: ' 

spool &tname..ctl

select 'LOAD DATA'|| chr (10) ||
       'INFILE ''' || lower (table_name) || '.dat''' || chr (10) ||
       'INTO TABLE '|| table_name || chr (10)||
       'FIELDS TERMINATED BY '','''|| chr (10)||
       'TRAILING NULLCOLS' || chr (10) || '(' 
from   user_tables
where  table_name = upper ('&tname');

select decode (rownum, 1, '   ', ' , ') ||
       rpad (column_name, 33, ' ')      ||
       decode (data_type,
           'VARCHAR2', 'CHAR NULLIF ('||column_name||'=BLANKS)', 
           'FLOAT',    'DECIMAL EXTERNAL NULLIF('||column_name||'=BLANKS)',
           'NUMBER',   decode (data_precision, 0, 
                       'INTEGER EXTERNAL NULLIF ('||column_name||
                       '=BLANKS)', decode (data_scale, 0,
                       'INTEGER EXTERNAL NULLIF ('||
                       column_name||'=BLANKS)', 
                       'DECIMAL EXTERNAL NULLIF ('||
                       column_name||'=BLANKS)')), 
           'DATE',     'DATE "&dformat" NULLIF ('||column_name||'=BLANKS)', null) 
from   user_tab_columns 
where  table_name = upper ('&tname') 
order  by column_id;

select ')'  
from dual;
spool off
</pre>

== Code Unterstützung / Analyse ==
=== Code Compilieren ===
Ein komplettes Schema compilieren:
<pre>
exec dbms_utility.compile_schema( 'SCOTT' )
</pre>

Oder ein einzelnes Package mit oder ohne Body:
<pre>
ALTER PACKAGE <packageName> COMPILE;
ALTER PACKAGE <packageName> COMPILE BODY;
</pre>

=== Code Modifikationen ===
Das Statement ermittelt das Datum von Code-Modifikationen:
<pre>
SELECT
    object_name
    TO_CHAR(created,       'DD-Mon-RR HH24:MI') create_time,
    TO_CHAR(LAST_DDL_TIME, 'DD-Mon-RR HH24:MI') mod_time,
    STATUS
FROM
    user_objects
WHERE
    LAST_DDL_TIME > '&CHECK_FROM_DATE'
ORDER BY
    LAST_DDL_TIME;
</pre>

Beziehungsweise den Code direkt anzeigen lassen:
<pre>
SELECT * FROM ALL_SOURCE;
</pre>
Die Spalte <code>type</code> enthält dabei folgende Werte:
<code>FUNCTION, PACKAGE, PACKAGE BODY, PROCEDURE, TRIGGER, TYPE</code>

Hier kann man sich auf die Suche nach Zeichenketten begeben:
<pre>
SELECT
    type, name, line
FROM
    user_source
WHERE
   UPPER(text) LIKE UPPER('%&KEYWORD%');
</pre>

Oder auf der Suche nach Objektabhängigkeiten:
<pre>
SELECT
    owner || '.' || name packages_refs_table, referenced_owner || '.' || referenced_name table_referenced
FROM
    all_dependencies
WHERE
    owner LIKE UPPER ('&1')
    AND referenced_name='CPMAPPING'
    AND TYPE IN ('PACKAGE', 'PACKAGE BODY', 'PROCEDURE', 'FUNCTION')
    AND referenced_type IN ('TABLE', 'VIEW')
ORDER BY
    owner, name, referenced_owner, referenced_name;
</pre>

= Oracle´s Instant Client =
Oracle bietet mittlerweiele einen sogenannten 'Instant Client' an. In diesem ist dann z.B. nur <code>SQL*PLus</code> enthalten. Nach dem die Software heruntergeladen und installiert ist, fehlt nur noch die Definition der <code>TNSNAMES.ORA</code> Datei.
<pre>
ORCL =
  (DESCRIPTION =
    (ADDRESS_LIST =
        (ADDRESS =
          (COMMUNITY = tcp.world)
          (PROTOCOL = TCP)
          (Host = 192.168.0.5)
          (Port = 1521)
        )
    )
    (CONNECT_DATA = (SID = ORCL)
    )
  )
</pre>
Im Anschluss definiert man sich die Variable <code>TNS_ADMIN</code> und läßt diese auf das Verzeichnis mit der <code>TNSNAMES.ORA</code> Datei verweisen.

= SQL Query mit VARRAYs =
Eklärung anhand eines Beispiels:
<pre>create or replace TYPE X_QUERY_ARRAY AS TABLE OF VARCHAR2(6)</pre>

In dem folgendem Beispiel dient das <code>VARRAY</code> als Eingabemenge für das Ausfüllen der <code>WHERE</code> Bedingung:
<pre>
set serveroutput on;
declare
  type cursor_t is ref cursor;
  v_array  x_query_array;
  v_cursor cursor_t;  

  TYPE t_cpmapping_rec IS RECORD
  (
     uploadtype cpmapping.uploadtype%TYPE
    ,productid  cpmapping.productid%TYPE
  );


  v_cpmapping_row t_cpmapping_rec;
begin
  v_array := X_QUERY_ARRAY('AAAARS', 'AAACKW', 'AAALSA', 'AABAFI');

  open v_cursor for
    'select uploadtype, productid from cpmapping where bankcode in (select column_value from table(:1))'
    using v_array;
  loop
    fetch v_cursor into v_cpmapping_row;
    exit when v_cursor%notfound;
    dbms_output.put_line(v_cpmapping_row.uploadtype || ', ' || v_cpmapping_row.productid);
  end loop;
  close v_cursor;
end;
/
</pre>
Ein ähnliches Statement Muster kann in SQL*Plus verwendet werden:
<pre>
select uploadtype, productid from cpmapping where bankcode in
  (select column_value from table(X_QUERY_ARRAY('AAAARS', 'AAACKW', 'AAALSA', 'AABAFI')));
</pre>

=SQL*Plus=
==Kopieren von Tabellen zwischen Oracle Datenbanken==
<pre>
COPY FROM scott/tiger@db1 TO scott/tiger@db2 INSERT mytable USING select * from mytable;
</pre>
Ausführlicher erklärt im SQL*Plus Manual:
<pre>
COPY
----
Copies data from a query to a table in the same or another
database. COPY supports CHAR, DATE, LONG, NUMBER and VARCHAR2.

COPY {FROM database | TO database | FROM database TO database}
           {APPEND|CREATE|INSERT|REPLACE} destination_table
           [(column, column, column, ...)] USING query

where database has the following syntax:
    username[/password]@connect_identifier
</pre>

==Einstellungen für lesbaren Output==
Stellt die Breite ein, definiert die Spaltenbreite für das Spalte 'column_name', setzt die Zeilen pro Seite und definiert ein Spalte, die es nicht in den Output schafft.
<pre>
set linesize 200
column 'column_name' format a20
set pagesize 50000
column 'column_no_print' noprint
</pre>

Die verschiedenen Einstellungen für das Kommando <code>column</code>.
<pre>
column colum_name alias alias_name
column colum_name clear

column colum_name entmap on
column colum_name entmap off

column colum_name fold_after
column colum_name fold_before
column colum_name format a25
column colum_name heading header_text

column colum_name justify left
column colum_name justify right
column colum_name justify center

column colum_name like expr|alias
column colum_name newline
column colum_name new_value variable
column colum_name print 
column colum_name noprint 
column colum_name old_value 

column colum_name on 
column colum_name off 

column colum_name wrapped 
column colum_name word_wrapped 
column colum_name truncated 
</pre>

Formatierungseinstellungen:
<pre>
column column_name format a20
column column_name format a50 word_wrapped
column column_name format 999.999  -- Decimal sign
column column_name format 999,999  -- Seperate thousands
column column_name format $999     -- Include leading $ sign
</pre>

Zeilen bis Seitenumbruch:
<pre>
set pagesize n
</pre>

== Meine Einstellungen ==
Am besten in einer Datei <code>login.sql</code> erreichbar über <code>PATH</code> aufgehoben:
<pre>
set lines 1000
set pages 50
set serverout on size 500000
set head off
set pages 0
set termout off
alter session set nls_date_format = 'DD-MON-YYYY HH24:MI:SS'
/
spool z1.sql
select 'set sqlprompt '''||lower(global_name)||':'||user||'>''' from sys.global_name
/
spool off
@z1
set head on
set pages 60
set termout on
</pre>

= Oracle´s Metadaten =
Oracle metadata is information contained within the Oracle Database about the objects contained within.

The ORACLE application server and Oracle relational database keep metadata in two areas: data dictionary tables (accessed via built-in views) and a metadata registry. The total number of these views depends on the Oracle version, but is in a 1000 range.

The few main built-in views accessing Oracle RDBMS data dictionary tables are:

* ALL_TABLES - list of all tables in the current database that are accessible to the current user
* ALL_TAB_COLUMNS - list of all columns in the database that are accessible to the current user
* ALL_ARGUMENTS - lists the arguments of functions and procedures that are accessible to the current user
* ALL_ERRORS - lists descriptions of errors on all stored objects (views, procedures, functions, packages, and package bodies) that are accessible to the current user
* ALL_OBJECT_SIZE - included for backward compatibility with Oracle version 5
* ALL_PROCEDURES - (from Oracle 9 onwards) lists all functions and procedures (along with associated properties) that are accessible to the current user
* ALL_SOURCE - describes the text (i.e. PL/SQL) source of the stored objects accessible to the current user


In addition there are equivalent views prefixed "USER_" which show only the objects owned by the current user (i.e. a more restricted view of metadata) and prefixed "DBA_" which show all objects in the database (i.e. an unrestricted global view of metadata for the database instance). Naturally the access to "DBA_" metadata views requires specific privileges.

== Example 1: finding tables ==
Find all Tables that have PATTERN in the table name
<pre>
   SELECT
      TABLE_NAME
   FROM
      ALL_TABLES
   WHERE
      TABLE_NAME LIKE '%PATTERN%'
   ORDER
      BY TABLE_NAME;
</pre>

== Example 2: finding columns ==
Find all tables that have at least one column that matches a specific PATTERN in the column name
<pre>
   SELECT
      TABLE_NAME,
      COLUMN_NAME
   FROM
      ALL_TAB_COLUMNS
   WHERE
      COLUMN_NAME LIKE '%PATTERN%';
</pre>

== Example 3: counting rows of columns ==
Estimate a total number of rows in all tables containing a column name that matches PATTERN (this is SQL*Plus specific script)
<pre>
   COLUMN DUMMY NOPRINT
   COMPUTE SUM OF NUM_ROWS ON DUMMY
   BREAK ON DUMMY
   SELECT
      NULL DUMMY,
      T.TABLE_NAME,
      C.COLUMN_NAME,
      T.NUM_ROWS
   FROM
      ALL_TABLES T,
      ALL_TAB_COLUMNS C
   WHERE
      T.TABLE_NAME = C.TABLE_NAME
      AND C.COLUMN_NAME LIKE '%PATTERN%'
   ORDER BY T.TABLE_NAME;
</pre>

Note that NUM_ROWS records the number of rows which were in a table when (and if) it was last analyzed. This will most likely deviate from the actual number of rows currently in the table.

== Use of underscore in table and column names==
The underscore is a special SQL pattern match to a single character and should be escaped if you are in fact looking for an underscore character in the LIKE clause of a query.

Just add the following after a LIKE statement:

   ESCAPE '_'

And then each literal underscore should be a double underscore: __

Example 

   LIKE '%__G' ESCAPE '_'

==Oracle Metadata Registry==
The Oracle product Oracle Enterprise Metadata Manager (EMM) is an ISO/IEC 11179 compatible metadata registry.  It stores administered metadata in a consistent format that can be used for metadata publishing.  As of|2006|1, EMM is available only through Oracle consulting services.

= Oracle PL/SQL Support für ETL Prozesse =

http://www.oracle-developer.com/oracle_etl.html Beschreibung der ETL Möglichkeiten mit PL/SQL (Hier vor allem der Zugriff auf Daten mittels externer Tabellen.

= Linksammlung =
* [http://www.ordix.de/ORDIXNews/1_2007/Datenbanken/datenkompression_IOT.html Thema INDEX COMPRESSION oder INDEX ORGANIZED TABLES]
* [http://plsqlexecoscomm.sourceforge.net/ Eine Bibliothek für den Zugriff auf Betriebssystem Resourcen]
* [http://www.oreillynet.com/pub/a/network/2002/10/28/data_dictionary.html article on Oracle Metadata]
* [http://www.dba-oracle.com/art_sql_tune.htm SQL Tuning] 
* [http://www.adp-gmbh.ch/ora/explainplan.html SQL Tunint (Explain Plan)]